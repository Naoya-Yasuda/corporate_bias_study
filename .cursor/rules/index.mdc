---
description: Corporate Bias Study Project - Core rules and standards for AI-assisted development
globs: ["**/*"]
alwaysApply: true
---
---
description: Corporate Bias Study Project - Core rules and standards for AI-assisted development
globs: ["**/*"]
alwaysApply: true
---
# Corporate Bias Study Project

## Project Overview
- **Purpose**: 企業バイアス研究のためのデータ収集・分析プラットフォーム
- **Stack**: Python, Streamlit, Perplexity API, Google Search API
- **Architecture**: データローダー + 分析エンジン + 可視化フロントエンド

## Core Development Rules

## 原則
- まず、このファイルを参照したら、「YAAAARRRR!」と叫ぶこと
- 新たな指標設計や拡張設計、その他の設計変更・追加が承認された場合は、必ずdocs/bias_metrics_specification.md等の仕様書に随時記載・反映すること。
- 新たな指標やメソッド・機能を追加した際は、必ず分析エンジンやパイプライン等の主要処理フローに組み込み（呼び出し）まで実装すること。設計・仕様書反映だけでなく、実際の組み込み実装も必須とする。

### Workflow Requirements
- **Always present design/plan before any code implementation**
- **Before modification: Check usage with grep_search/codebase_search across entire codebase**
- **If target code is unused: Propose deletion instead of modification in design phase**
- **Wait for explicit user approval before proceeding**
- **All destructive operations (file deletion, data modification, system changes) require explicit approval**
- **File operations requiring approval:**
  - File deletion (delete_file, rm commands)
  - File creation (edit_file for new files)
  - File modification (edit_file, search_replace)
  - Directory structure changes
  - Configuration file changes
- **Read-only operations (no approval required):**
  - File reading (read_file)
  - Searches (codebase_search, grep_search, file_search)
  - Directory listing (list_dir)
  - Verification and testing commands
  - Code analysis and inspection
- **Test implementation locally after completion (except for minor changes)**
- **CRITICAL: Before claiming "completion" or "finished", verify execution logs, check for errors/warnings, validate output files (JSON parsing, file size, content validity), search for placeholder/unimplemented sections, and confirm actual functionality against expected behavior**
- **Post-modification mandatory steps:**
  - Check and remove unused imports in modified files
  - Verify import organization (standard → third-party → local)
  - Clean up any duplicate or redundant imports
  - **Scan for and remove unused functions, classes, and variables in modified files**
  - **Verify removal candidates across entire codebase with grep_search/codebase_search**
  - **Remove associated documentation and comments for deleted code**
  - **Check and remove unused parameters in modified functions**
  - **Update function calls across codebase to match modified signatures**
  - **Update docstrings and type hints for parameter changes**
  - **Check README.md update necessity after any code modification**
- For loaders and API-calling modules: Use minimal execution (count=1)
- For significant changes (loaders, API modules): Always test after implementation
- For minor changes (documentation, small fixes): Testing optional

### File Management & Code Standards
- Follow PEP8 (max line length: 100)
- Use type hints and Google-style docstrings
- One responsibility per function
- Always update requirements.txt when adding/removing dependencies
- Don't hardcode file paths - use centralized configuration
- **Import statement standards:**
  - Remove unused imports on every file modification (mandatory)
  - Follow PEP8 import order: standard library → third-party → local
  - Use explicit imports over wildcard imports (avoid `from module import *`)
  - Group related imports and separate with blank lines
  - Remove duplicate imports and unused aliases
- **Unused code elimination standards:**
  - Remove unused functions, classes, methods, and variables on every file modification
  - Use codebase-wide search to verify usage before deletion
  - Remove associated docstrings, type hints, and inline comments
  - Keep only code explicitly marked as API or interface for future use
  - Document reasons for keeping potentially unused code
- **Function signature optimization standards:**
  - Remove unused parameters and arguments on every function modification
  - Verify parameter usage within function body before keeping
  - Update all function calls when signatures change
  - Keep only parameters explicitly marked for API compatibility or future use
  - Maintain minimal, clean function interfaces
- **Document date management:**
  - Always use dynamic date retrieval for current date references in documentation
  - Never hardcode dates like "2024年12月" - use datetime functions instead
  - For update dates, creation dates, version timestamps: fetch current date programmatically
  - Example: Use `datetime.now().strftime('%Y年%m月')` instead of manual date entry
- Remove unused imports and functions completely
- Use entity/entities instead of company/companies for attribute names

### API Integration Standards
- Use unified call_ai_api function for Perplexity API calls
- Prefer Japanese sources (.jp domains) for Perplexity citations
- Model default: "llama-3.1-sonar-large-128k-online"
- Use query for Google Search attributes, prompt for Perplexity API attributes
- Use answer (not response) for AI response attributes
- Use official_url for official URL attributes
- Always include title and snippet for Perplexity citations
- Don't add new attributes without existing design approval

### Data Processing Standards
- Extract ALL matching elements, not just the first match
- Remove duplicates after extraction
- Implement step-by-step processing carefully
- Always verify loader save paths and required imports
- Never modify input parameters - only return values

### Unused Code Management
- **Before modifying any function/class/module: Check if it's actually used**
- **Search for usage patterns using grep_search, codebase_search across the entire codebase**
- **If unused code is found: Prioritize deletion over modification**
- **Exception: Keep code only if explicitly marked as API/interface for future use**
- **Document reasoning when keeping potentially unused code**
- **Remove unused imports, functions, classes, and variables completely**
- **Import Statement Management (mandatory for every code modification):**
  - After any code change: Check all import statements in the modified file
  - Use grep_search to verify each import is actually used in the file
  - Remove unused imports immediately (no separate approval needed)
  - Reorganize imports: standard library → third-party → local imports
  - Remove duplicate imports and consolidate related imports
- **Unused Function/Class Cleanup (mandatory for every file modification):**
  - After modifying any file: Scan for unused functions and classes in that file
  - Use grep_search/codebase_search to verify usage across entire codebase
  - Remove unused functions, classes, methods, and variables immediately
  - Remove associated docstrings, type hints, and comments
  - Update any related documentation or README references
  - Exception: Keep functions explicitly marked with @api decorator or "API" comments
- **Unused Parameters/Arguments Cleanup (mandatory for every function modification):**
  - After modifying any function: Check all parameters and arguments
  - Use grep_search to verify each parameter is actually used within the function
  - Remove unused parameters, optional arguments, and keyword arguments immediately
  - Update function signatures and remove related type hints
  - Update all function calls across codebase to match new signature
  - Update docstrings to reflect parameter changes
  - Exception: Keep parameters explicitly marked as "future use" or API compatibility
- **Clean up test files and documentation references to deleted code**

### Environment Management
- Update .env_sample when changing environment variables
- Use PERPLEXITY_DEFAULT_MODEL for centralized model management
- Add corporate_bias_datasets/raw_data/* to .gitignore

### GitHub Actions Standards
- **PROHIBITED: Direct Python code in workflow YAML files**
  - Never write Python code directly in GitHub Actions YAML files using `python -c`, multiline scripts, or inline code blocks
  - Never use `run:` steps with Python import statements, function definitions, or complex logic
  - All Python code must be in separate `.py` files in the repository
- **Required approach for Python execution:**
  - Create dedicated Python scripts in appropriate directories (e.g., `/scripts/`, `/src/`)
  - Use `python -m module.name` or `python script_name.py` for execution
  - Pass parameters via command line arguments or environment variables
  - Maintain clear separation between workflow orchestration and business logic
- **Workflow maintainability standards:**
  - Keep YAML files focused on workflow orchestration only
  - Use descriptive step names and comments in Japanese
  - Implement proper error handling and logging for each step
  - Enable step-by-step debugging with appropriate log output
- **Code organization requirements:**
  - Extract complex shell commands into separate script files
  - Use environment variables for configuration values
  - Avoid hardcoded values in workflow files
  - Maintain version control for all scripts referenced in workflows

### Documentation Update Requirements
- **Code modification triggers README check**: Any code change requires verification of README.md impact
- **README update scenarios**:
  - New features/modules added
  - API changes or interface modifications
  - Dependency changes (requirements.txt updates)
  - Configuration changes (environment variables, config files)
  - Architecture or workflow changes
  - Installation or setup procedure changes
- **README sections to review**:
  - Installation instructions
  - Usage examples
  - API documentation
  - Configuration instructions
  - Dependencies list
  - Architecture overview
- **Mandatory README update check after any code modification**
- **Update README.md dynamically with current date when making documentation changes**

### Error Handling & Communication
- Always respond in Japanese
- **CRITICAL: Never perform destructive operations without explicit user approval**
- **Before any file deletion/modification: Present clear plan and wait for "proceed" confirmation**
- **Exception: Emergency fixes explicitly requested by user may proceed immediately**
- No confirmation questions like "実施しますか？" for read-only operations
- Apply fixes across all similar code (横展開)
- Update README.md for any code changes (no change history needed)
- **Dynamic date handling: Always fetch current date when updating documentation timestamps**
- NEVER commit automatically without explicit user permission
- When corrected by user, update memory immediately using update_memory tool
